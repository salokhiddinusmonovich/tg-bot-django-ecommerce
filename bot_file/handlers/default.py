from aiogram import types
from random import randrange
from aiogram.dispatcher.filters import Text
from django.conf import settings
from ..loader import bot, dp
from ..keyboards import sign_inup_kb, admin_kb, default_kb
from ..models import TelegramUser
from .authorization import sign_in
from asgiref.sync import sync_to_async
import pytz
from aiogram.types import PreCheckoutQuery
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

CURRENCY = 'XTR'


HELP_TEXT = """
–ü—Ä–∏–≤–µ—Ç üëã, —è –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤! –£ –Ω–∞—Å –µ—Å—Ç—å —Ç–∞–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –∫–∞–∫:

<b>–ü–æ–º–æ—â—å ‚≠êÔ∏è</b> - –ø–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞
<b>–û–ø–∏—Å–∞–Ω–∏–µ üìå</b> - –∞–¥—Ä–µ—Å, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã
<b>–ö—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä üõí</b> - —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å
<b>–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è

–ù–æ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –Ω—É–∂–Ω–æ <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –∏–ª–∏ –≤–æ–π—Ç–∏</b> –≤ —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å. 
–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üëå'</b> –∏–ª–∏ <b>–í–æ–π—Ç–∏ üëã</b>
–ï—Å–ª–∏ —ç—Ç–æ–≥–æ –Ω–µ —Å–¥–µ–ª–∞–µ—Ç–µ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç <b>–Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã</b> üî¥

–†–∞–¥—ã —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –¥–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ ü¶¶
"""

# Command to start the bot
async def cmd_start(message: types.Message):
    if message.chat.type == 'private':
        try:
            await bot.send_message(chat_id=message.chat.id,
                                text="–ü—Ä–∏–≤–µ—Ç ‚úã, —è –±–æ—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤!\n\n"
                                        "–£ –º–µ–Ω—è –≤—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –≤—Å–µ —á—Ç–æ –∑–∞—Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ "
                                        "—Ç–æ–≤–∞—Ä–æ–≤ –∫–æ—Ç–æ—Ä—ã–µ —É –º–µ–Ω—è –µ—Å—Ç—å.\n\n"
                                        "–ù–∞–∂–º–∏—Ç–µ —Å–Ω–∏–∑—É –Ω–∞ –∫–æ–º–∞–Ω–¥—É '–ö–∞—Ç–∞–ª–æ–≥ üõí'\n\n"
                                        "–ù–æ –¥–ª—è –Ω–∞—á–∞–ª–∞ <b>–Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b>, "
                                        "–∏–Ω–∞—á–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –±—É–¥—É—Ç –Ω–µ –¥–æ—Å—Ç—É–ø–Ω—ã!\n\n"
                                        "–ù–∞–∂–º–∏ –Ω–∞ –∫–æ–º–∞–Ω–¥—É <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è üëå'</b> –∏–ª–∏ <b>–í–æ–π—Ç–∏ üëã</b>",
                                reply_markup=sign_inup_kb.markup)
        except Exception as e:
            await message.reply(text=f"–û—à–∏–±–∫–∞: {str(e)}. –ß—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, "
                                    "—Ç—ã –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –º–Ω–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: "
                                    "https://t.me/salo_kh")


# Help command
async def cmd_help(message: types.Message):
    if message.chat.type == 'private':
        await bot.send_message(chat_id=message.chat.id, text=HELP_TEXT, reply_markup=default_kb.markup)



# Get profile command
# @dp.message_handler(commands='getprofile')
async def cmd_getprofile(message: types.Message):
    if message.chat.type == 'private':
        try:
            user = await get_user_by_chat_id(message.chat.id)
            if not user:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return

            if not user.admin:
                await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
                return

            args = message.get_args()
            if not args:
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä: /getprofile 'username'")
                return

            searched_user = await get_user_by_chat_id_or_user_login(args)
            if searched_user:
                moscow_tz = pytz.timezone('Europe/Moscow')
                registered_at_moscow = searched_user.registered_at.astimezone(moscow_tz)
                
                profile_info = (
                    f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</b>\n"
                    f"üîë <b>–õ–æ–≥–∏–Ω:</b> {searched_user.user_login}\n"
                    f"üí∞ <b>–ë–∞–ª–∞–Ω—Å:</b> {searched_user.balance}\n"
                    f"üëë <b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä:</b> {'–î–∞' if searched_user.admin else '–ù–µ—Ç'}\n"
                    f"üìÖ <b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {registered_at_moscow.strftime('%d-%m-%Y %H:%M:%S')}\n"
                    f"üìù <b>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</b> {searched_user.comment or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤'}"
                )
                await message.answer(profile_info, parse_mode='HTML')
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")


# @dp.message_handler(commands='access')
async def cmd_access(message: types.Message):
    if message.chat.type == 'private':
        user = await get_user_by_chat_id(message.chat.id)
        if not user or not user.admin:
            await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
            return

        args = message.get_args()
        if not args:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ª–æ–≥–∏–Ω –∏–ª–∏ chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞.")
            return

        try:
            target_user = await get_user_by_chat_id_or_user_login(args)
            if target_user:
                target_user.admin = True
                await save_user(target_user)  
                await message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target_user.user_login} —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.")
            else:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞: {e}")


# --------------------------------------------------------------------------------------

async def donate_dev(message: types.Message):
    await message.answer("–•–æ—Ç–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å? –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –¥–æ–Ω–∞—Ç–∞!: /donate")



@dp.message_handler(commands=['donate'])
async def donate_ongoing(message: types.Message) -> None:
    prices = [types.LabeledPrice(label="1 Star ‚≠ê", amount=1)]  # Amount is in the smallest currency unit (e.g., cents)

    await message.bot.send_invoice(
        chat_id=message.chat.id,  # Correctly using the chat_id
        title="Support me with donation",
        description="Support with one star ‚≠ê",
        payload="channel_support",  
        provider_token="398062629:TEST:999999999_F91D8F69C042267444B74CC0B3C747757EB0E065",  # Replace with your actual provider token
        currency=CURRENCY,  
        prices=prices,
        reply_markup=payment_keyboard(),
        start_parameter="donation_support",  # Optionally add start_parameter for future references
        # photo_url="https://your_image_url.com/photo.jpg",  # Optionally add a photo for the invoice
        # photo_size=512, 
        # photo_width=512, 
        # photo_height=512  
    )


def payment_keyboard():
    keyboard = InlineKeyboardMarkup()
    keyboard.add(
        InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å 1 ‚≠ê", pay=True)  # 'pay=True' indicates a payment button
    )
    return keyboard


@dp.pre_checkout_query_handler()
async def pre_checkout_handle(pre_checkout_query: PreCheckoutQuery):
    await pre_checkout_query.answer(ok=True)


@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message) -> None:
    successful_payment = message.successful_payment
    # Sending a visual confirmation emoji or animation before the payment details
    await message.answer("‚ú® Payment received! Processing your details... ‚ú®")
    
    # Sending the payment details in a separate message
    await message.answer(
        f"Thank you for your payment! üéâ\n\n"
        f"Payment ID: {successful_payment.telegram_payment_charge_id}\n"
        f"Provider Payment Charge ID: {successful_payment.provider_payment_charge_id}"
    )
# ---------------------------------------------------------------------------------------------


@sync_to_async
def get_user_by_chat_id_or_user_login(identifier):
    if identifier.isdigit():
        return TelegramUser.objects.filter(chat_id=int(identifier)).first()
    return TelegramUser.objects.filter(user_login=identifier).first()



@sync_to_async
def get_user_by_chat_id(chat_id):
    try:
        return TelegramUser.objects.get(chat_id=chat_id)
    except TelegramUser.DoesNotExist:
        return None
    
@sync_to_async
def save_user(user):
    user.save()


# Register default handlers
def default_handlers_register():
    dp.register_message_handler(cmd_start, commands='start')
    dp.register_message_handler(cmd_help, Text(equals='–ü–æ–º–æ—â—å ‚≠êÔ∏è'))
    dp.register_message_handler(cmd_getprofile, commands='getprofile')
    dp.register_message_handler(cmd_access, commands='access')
    dp.register_message_handler(donate_dev, Text(equals='–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –º–µ–Ω—è!'))

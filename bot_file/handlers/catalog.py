from aiogram import types
from asgiref.sync import sync_to_async

from ..loader import bot, dp
from ..keyboards import sign_inup_kb
from ..models import Product
from aiogram.dispatcher.filters import Text
from .authorization import sign_in
from ..keyboards.default_kb import markup
import asyncio
from django.db.models import QuerySet
from threading import Thread
from ..models import Product, TelegramUser
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from asgiref.sync import sync_to_async


back_button = KeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è")
back_kb = ReplyKeyboardMarkup(resize_keyboard=True).add(back_button)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"
@dp.message_handler(Text(equals="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"))
async def view_profile(message: types.Message):
    user, bought_products = await get_user(message.from_user.id)
    if user is None:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.", reply_markup=back_kb)
        return

    bought_products_text = ', '.join([product.name for product in bought_products]) if bought_products else "–ù–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤"
    profile_info = (
        f"üë§ –ò–º—è: {user.user_login}\n"
        f"üí∞ –ë–∞–ª–∞–Ω—Å: {user.balance} —Ä—É–±–ª–µ–π\n"
        f"üõí –ö—É–ø–ª–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã: {bought_products_text}\n"
        f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registered_at.strftime('%d-%m-%Y')}\n"
    )

    await message.answer(profile_info, reply_markup=back_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"
@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è"))
async def back_to_main_menu(message: types.Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=markup)



def send_products(chat_id, products):
    for product in products:
        # Read the product image as bytes
        photo_id = product.photo.open('rb').read()
        caption = f"–¢–æ–≤–∞—Ä üöÄ: {product.name}\n–û–ø–∏—Å–∞–Ω–∏–µ üí¨: {product.description}\n–¶–µ–Ω–∞ üí∞: {product.price} —Ä—É–±–ª–µ–π"
        bot.send_photo(chat_id=chat_id, photo=photo_id, caption=caption)



# @dp.message_handler(Text(equals='–ö–∞—Ç–∞–ª–æ–≥ üõí'))
async def show_products(message: types.Message):
    if not sign_in['current_state']:
        await message.answer("–í—ã –Ω–µ –≤–æ—à–ª–∏ –≤ –∞–∫–∫–∞—É–Ω—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏ –≤ –ø—Ä–æ—Ñ–∏–ª—å ‚ÄºÔ∏è", reply_markup=sign_inup_kb.markup)
        return

    products = get_all_products_sync()

    if products:
        await bot.send_message(chat_id=message.chat.id, text="–í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã üëá")
        

        thread = Thread(target=send_products, args=(message.chat.id, products))
        thread.start()
    else:
        await bot.send_message(chat_id=message.chat.id, text="–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@sync_to_async
def get_all_products_sync():
    return list(Product.objects.all())


@sync_to_async
def get_user(chat_id):
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º QuerySet –≤ –æ–±—ä–µ–∫—Ç, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ª–µ–Ω–∏–≤–æ–π –æ—Ü–µ–Ω–∫–∏
    user = TelegramUser.objects.filter(chat_id=chat_id).first()
    if user:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ –∫—É–ø–ª–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –≤ Python-—Å–ø–∏—Å–æ–∫
        bought_products = list(user.bought_products.all())
        return user, bought_products
    return None, []



def catalog_handlers_register():
    dp.register_message_handler(show_products, Text(equals='–ö–∞—Ç–∞–ª–æ–≥ üõí'))
    dp.register_message_handler(view_profile, Text(equals="–ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"))